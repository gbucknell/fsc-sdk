#  c) Copyright 2008 Samuel Debionne.
#
#  See http://code.google.com/p/fsc-sdk/ for the library home page.


import modules ;
import set ;
import stage ;
import package ;
import path ;
import common ;
import os ;
import regex ;
import errors ;
import "class" : new ;
import common ;
import sequence ;


path-constant BOOST_ROOT : . ;
constant BOOST_VERSION : 1.37.0 ;
constant BOOST_JAMROOT_MODULE : $(__name__) ;


local boost-root = [ path.make "./boost" ] ;
local sandbox-root = [ path.make "./sandbox" ] ;


project all-boost
   : requirements <include>$(boost-root) <include>$(sandbox-root)
     # disable auto-linking for all targets here,
     # primarily because it caused troubles with V2
     <define>BOOST_ALL_NO_LIB=1
     <define>BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG
     <define>BOOST_LOG_DONOT_USE_WCHAR_T
     <threading>multi:<define>BOOST_HAS_THREADS
   : usage-requirements <include>$(boost-root) <include>$(sandbox-root)
     # disable auto-linking for all targets here,
     # primarily because it caused troubles with V2
     <define>BOOST_ALL_NO_LIB=1
     <define>BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG
     <define>BOOST_LOG_DONOT_USE_WCHAR_T
     <threading>multi:<define>BOOST_HAS_THREADS
   ;


# header only libs
alias headers : : : : <include>$(boost-root) <include>$(sandbox-root) ;


# iostream configuration
# path-constant ZLIB_SOURCE : ../zlib/zlib ;
# constant NO_BZIP2 : 1 ;


# This rule is called by Boost.Build to determine the name of
# target. We use it to encode build variant, compiler name and
# boost version in the target name
rule tag ( name : type ? : property-set )
{
    if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB
    {
        if $(layout) = versioned
        {
            local result = [ common.format-name
                <base> <toolset> <threading> <runtime> -$(BOOST_VERSION_TAG)
                -$(BUILD_ID)
                : $(name) : $(type) : $(property-set) ] ;
            
            # Optionally add version suffix.
            # On NT, library with version suffix won't be recognized
            # by linkers. On CYGWIN, we get strage duplicate symbol
            # errors when library is generated with version suffix.
            # On OSX, version suffix is not needed -- the linker expets
            # libFoo.1.2.3.dylib format.
            # AIX linkers don't accept version suffixes either.
            # Pgi compilers can't accept library with version suffix
            if $(type) = SHARED_LIB &&
              ( ! ( [ $(property-set).get <target-os> ] in windows cygwin darwin aix ) &&
                ! ( [ $(property-set).get <toolset> ] in pgi ) )
            {
                result = $(result).$(BOOST_VERSION)  ;
            }
            
            return $(result) ;
        }
        else
        {
            return [ common.format-name
                <base> <threading> <runtime> -$(BUILD_ID)
                : $(name) : $(type) : $(property-set) ] ;
        }
    }
}


# This rule should be called from libraries' Jamfiles and will
# create two targets, "install" and "stage", that will install
# or stage that library. The --prefix option is respected, but
# --with and --without options, naturally, are ignored.
#
# - libraries -- list of library targets to install.
rule boost-install ( libraries * )
{
    package.install install
        : <dependency>/boost//install-headers $(install-requirements)
        : # No binaries
        : $(libraries)
        : # No headers, it's handled by the dependency
    ;

    install stage : $(libraries) : <location>$(BOOST_STAGE_LOCATE) ;

    local c = [ project.current ] ;
    local project-module = [ $(c).project-module ] ;
    module $(project-module)
    {
        explicit stage ;
        explicit install ;
    }
}


# Make boost project ids of all libraries known.
local libraries = [ MATCH .*libs/(.*) : [ glob $(boost-root)/libs/* ] ] ;
local builds ;
for local l in $(libraries)
{
   builds += [ MATCH .*libs/(.*)/build : [ glob $(boost-root)/libs/$(l)/* ] ] ;
}

for local b in $(builds)
{
   use-project /boost/$(b) : $(boost-root)/libs/$(b)/build ;
}

# location of python
local python-root = [ MATCH "^--with-python-root=(.*)" : [ modules.peek : ARGV ] ] ;
PYTHON_ROOT ?= $(python-root) ;


# Make sandbox project ids of all libraries known.
local libraries = [ MATCH .*libs/(.*) : [ glob $(sandbox-root)/libs/* ] ] ;
local builds ;
for local l in $(libraries)
{
   builds += [ MATCH .*libs/(.*)/build : [ glob $(sandbox-root)/libs/$(l)/* ] ] ;
}

for local b in $(builds)
{
   # ECHO "lib : " $(b) ;
   use-project /boost/$(b) : $(sandbox-root)/libs/$(b)/build ;
}
